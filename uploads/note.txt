https://www.youtube.com/watch?v=dPM3POQjyqo&list=PLsvvBhdpMqBzyrmkAAO5zsOwO0wCTU7bj&index=1



npm init -y           : start a new node js project
npm install dotenv    : install dotenv package to read .env files
npm install pg        : install postgres client package 
npm install sequelize : install orm package for database
npm install -g sequelize-cli : install to provide command line interface for sequelize
npx sequelize-cli init   : Generate boilerplate structure for Sequelize.
                         + This means it will create the folder structures
                         + in your projects as follows;
                         + config/
                         + models/
                         + migrations/
                         + seeders/

npm install express     : used to create server to serve clients
npm install body-parser : A middleware (especially with express) that parses the body
                        + of incoming HTTP requests and makes it available under 
                        + req.body. Thus, avoids dealing with raw stream of bytes in
                        + the body of a request (POST, PUT, PATCH) to handle the
                        + chunks and decode JSON and form data.

npm install bcrypt      : used to hash and verify sensitive data  like password.
npm install jsonwebtoken: used for stateless authentication between client and server.
npm install multer      : used as a middleware for handling files uploaded by clients.

# =====
# MODEL
# =====
Models are database table definition.
Every model has a controller, route for CRUD operation.


# ===========
# CONTROLLERS
# ===========
This contains mainly functions required to create, get, update and delete
instances of a model (table entries (row)) as required by an application


# ======
# ROUTES
# ======
This are path through which a client request is services. The routes links the client request
to the approriate controller to perform action for the client.


# =============================================
# BROWSER CLIENT ALTERNATIVE ALTERNATIVE (CURL)
# =============================================

# Fetch all users
curl http://localhost:3000/api/users 

# Fetch user by id
curl http://localhost:3000/api/users/1  

# Post data to server to be stored in database (adding an entry the user model (table) in database).
curl -X POST http://localhost:3000/api/users/1  -H "Content-Type: application/json"  -d '{"firstName":"Heian","lastName":"sanda", "email": "heian.sanda@karate.de"}'

# Put data to server to be update in database (update an existing entry in the user model (table) in database).
curl -X PUT http://localhost:3000/api/users/1  -H "Content-Type: application/json"  -d '{"firstName":"Heian","lastName":"sanda", "email": "heian.sanda@karate.de"}'

# Post data server to be deleted in database (delete an existing entry in the user model (table) in database).
curl -X PUT http://localhost:3000/api/users/1  -H "Content-Type: application/json"  -d '{"firstName":"Heian","lastName":"sanda", "email": "heian.sanda@karate.de"}'


# v6
# ==============================================
# DATABASE TABLE (MODEL) QUERIES WITH SEQUELIZE
# ==============================================
const User = require(./models/User)

// Find all Records
User.findAll()
.then( (users) => {
    console.log(users)
    })
.catch( err => { console.error(' error ', err)})




// Find Record with Conditions (filters)
User.findAll({
    where: {
        email: a@b.com,
    }
})
.then( (users) => {
    console.log(users)
    })
.catch( err => { console.error(' error ', err)})



// Find Record with Conditions ( find only one record with given id)
User.findOne({
    where: {
        id: 2,
    }
})
.then( (users) => {
    console.log(users)
    })
.catch( err => { console.error(' error ', err)})



// Create a new record (row)
User.create({
    firstName: 'f',
    lastName: 'l',
    email: 'fl@b.com'
})
.then( (users) => {
    console.log('user created ', users)
    })
.catch( err => { console.error(' error ', err)})




// update Record with Conditions (filters)
User.update({
    firstName: 'fn'
},
{
    where: { id: 1 }
})
.then( (users) => {
    console.log("update successful)
    })
.catch( err => { console.error(' error ', err)})



// Delete Record with Conditions ( find only one record with given id)
User.destroy({
    where: {
        id: 2,
    }
})
.then( (users) => {
    console.log(users)
    })
.catch( err => { console.error(' error ', err)})



// Using raw sql queries
const sql = 'SELECT * FROM users WHERE  age > :age';
sequelize.query(sql, {
    replacements: {age: 18},
    type: Sequelize.QueryTypes.SELECT 
})
.then ( (result) => { console.log(results); })
.catch ( (err) => console.error( 'Error: ', err));


// v7 : findOne
// -----------
// record that matches a set of criteria
const user = await User.findOne( { where: { firstName: 'john'}})

// v7 : findAll 
// -----------
// Retrieve multiple records that matches a set of criteria
const user = await User.findAll ( { where: { age: { [Sequelize.Op.gt]: 18 }}})

// v7 : findAndCountAll
// -------------------
// similar to findAll, it returns the result together with its length. it is useful for pagination.
const {row, count } = await User.findAndCountAll ( { where: { age: { [Sequelize.Op.gt]: 18 }}})


// v7 : findByPk
// ------------
// Find a record by its primary key
const user = await User.findByPk(1); 


// v7: findOrCreate
// ---------------
// attempts to find a record based on a given criteria and creates it if it does not exist.
const [user, created] = User.findOrCreate({
    where: { firstName: 'John' },
    defaults: { age:30 }
})

// v7: findOne - with association to other models
// ----------------------------------------------
// retrieve associated records of a model with association type (hasMany)
const user = await User.findOne({
    where: { username: 'John'},
    include: [Post] // associate model to queried model.
})

# VIRTUALS
these are computed properties that are not stored in the database but
are based on the values of other attributes. 


# =============================================================================
# ASSOCIATIONS BETWEEN MODELS (TABLES)                                        |
# =============================================================================
# V13: One-To-One
# ---------------
This type of model association specifies the foreign key relationship between 
two models. For example, Each user has one associated profile and each profile
belongs to one user. (See ./models/index.js)
User.hasOne(Profile)
Profile.belongsTo(User) // Adds the user primary key to the Profile (model) table.

# ----------------
# V14: One-To-Many
# ----------------
This association type specifies the relationship between a model which has 
multiple instance of it being associated with only a single instance of 
another model.
Example: Each User can have multiple Todo. Therefore, this is achieved by an
addition of the user primary key in a new column within the todo model (table)
User.hasMany(Todo)
Todo.belongsTo(User)


# -----------------
# V15: Many-To-Many
# -----------------
This association type establish relationship between a two models where 
instances of each of them can be found in its counter part model.
Example: Students and Courses. 
A student can enroll for multiple courses
A course can have multiple students enrolled in it.

syntax:
Student.belongsToMany(Course, { through: "StudentCourse })
Course.belongsToMany(Student, { through: "StudentCourse })
this association would map the two models using a new table (model) called 
"StudentCourse"

steps:
s0: create new models (./models/course.js and ./models/student.js)
s1: import them in ./models/index.js and define their relationship
s2: test the association in app.js (with anonymous test function)




# =============================================================================
# LOAD DATA FROM DATABASE - ADVANCED METHOD (EAGER LOADING)
# =============================================================================
This refers to query type that request all the data about a node in a model all
at ones. this kind of query is complex.
# --------------------------
# V18: Eager loading (tut09)
# --------------------------
See test function in app.js to see how eager loading is used to request or Fetch
or query the database by Primarykey with more interested data about the user.





# =============================================================================
# CONNECTION POOL NODE WITH SEQUELIZE
# =============================================================================
# --------------------------
# V19 | tut10 | Establish pool connection : 
# --------------------------
This deals with having multiple process to manage database connection for 
query data.
It is implemented in ./config/database
The pool can be closed as below
sequelize.close()
  .then( ()=> {
    console.log("connection pool closed")
  })
  .catch( (err)=> {
    console.error("Error closing connection pool ", err);
  });


# =============================================================================
# V21 | tut11 | MIGRATION |
# =============================================================================
Migrations are like git commits that creates a scripts which when executed, 
automates the process of creating and modifying tables (models) in a database.
The executed actions can also be rolled back to a previous migration just like
own one uses git commits to roll back changes in a file. Therefore, migrations
are used as version control. Each migration is named just as how each git commit
has a commit number and message binded to it.
Migrations is perform via the sequelize-cli tool.
-----
steps
-----
s1: install the sequelize-cli package -> npm install -g sequelize-cli
s2: open a command prompt at the project base directory
s3: execute command 
|-- $ npx sequelize-cli init : This command creates folders for migration and 
                             + -> seeder with base file structure for user to
                             + -> define the table or models they want to create
                             + -> in their database.

s4: execute command
|-- $ npx sequelize migration:create --name <migration_name> # alternative command
|-- : This will create a new migration file with the given name <migration_name>
    + -> in the migrations folder of your project. Within this file once can
    + -> add the commands to create the models (table) in the database just as
    + -> defined in your ./models/*.js files for your database.
    : Note that there are two sections within the newly created migration file.
    + -> (up and down). Model definition should be in the up section and actions to
    + -> to revert or delete the table should be in the down section.
|-- + -> created and stored in migration directory. ./migrations/*migration_name.js

s5: Rename file ./config/config.json to ./config/config.js. This action is required
|-- because database credentials in the .json file are hard coded and such
|-- information should be stored in a .env file which will retrieved using 
|-- javascript dotenv pkg and populates the json objects that contains the
|-- the database credentials.
|-- Note that this object contains credentials for various purpose such as
|-- Production, test, development which can be selected when making the 
|-- actual migration.

s6: execute command
|-- $ npx sequelize db:migrate --env development  # creates the table(model) in db
|-- + -> Note that these table were defined in the up section of the newly created 
|-- + -> migration file. Therefore, this command executes code in the up section.
|-- : The option --env is used to selected the credentials from the json object
|-- + -> listed in the ./config/config.js file.
|-- Check your database to see that the table was added.

s7: execute command
|-- $ npx sequelize db:migrate:undo --env development # Deletes the table from the db
|-- + -> Note that these table were defined in the up section of the newly created 
|-- + -> migration file. But this command executes code in the down section.
|-- : The option --env is used to selected the credentials from the json object
|-- + -> listed in the ./config/config.js file.



# =============================================================================
# V22 | tut12 | SEEDERS |
# =============================================================================
The process of seedings simply means populating a table in a database with 
actual data (rows in the table) within the columns of the table(model).
This is performed similarly like migration as follows.
------
STEPS 
------
S01: Execute command
|--  $ npx sequelize seed:generate --name <seed_name> : This generates a seed 
|--  + --> file with the given seed_name where user can define codes to be 
|--  + --> executed which will add data to the table in database. This file is
|--  + --> created and stored in the seeder directory. ./seeders/*seed_name.js

S02: Add codes in the newly created seed file in seeder directory to added 
|--  Content into the database table when executed. Just like migrations. the 
|--  file contains two sections (up and down). The code added in the up section
|--  will add contents to the tables in database while those in the down section
|--  will delete all entries in the specified database table.
|--  Note that there is not need to add information for attributes (id) specified
|--  as primary key. The database will handle that automatically.

S03: Execute command
|-- $ npx sequelize db:seed:all --env development # populate the table(model)
|-- + -> in database with data from seed files
|-- : Note that these data were defined in the up section of the newly created 
|-- + -> seed file. 
|-- : The option --env is used to selected the credentials from the json object
|-- + -> listed in the ./config/config.js file.
|-- Check your database to see that the table now contains entries (rows) in it.

S04 : Execute command
|-- $ npx sequelize db:seed:undo --env development # Deletes all entries (rows)
|-- + -> in a database table.
|-- + -> Note that these entries were defined in the up section of the newly created 
|-- + -> seed file. But this command executes code in the down section.
|-- : The option --env is used to selected the credentials from the json object
|-- + -> listed in the ./config/config.js file.




# =============================================================================
# V32 | tut13 | ADD A NEW COLUMN TO TABLE IN DATABASE - SEQUELIZE-CLI
# =============================================================================
This kind of operation can be performed using sequelize-cli migrations as follows

-----
STEPS
-----
S01: Execute command
|-- $ npx sequelize migration:generate --name <migration_name> # alternative command
|-- $ npx sequelize migration:generate --name add_col_age_to_users # usage example
|-- : This will create a new migration file with the given name <migration_name>
    + -> in the migrations folder of your project. Within this file once can
    + -> add the commands to add column in the models (table) in the database.
    + -> "await queryInterface.addColumn(<table_name, <col_name, {contraints})
    + -> "await queryInterface.addColumn('Users', 'age', {type: Sequelize.INTEGER}) # usage
    + -> This must be done in the up section of the file.
    : Note that there are two sections within the newly created migration file.
    + -> (up and down).
    + -> To revert the action of the up section the down section is used.
    + -> "await queryInterface.addColumn(<table_name>, <col_name>)
    + -> "await queryInterface.removeColumn('Users', 'age') # usage
    + -> See file in directory ./migrations/*add_col_age_to_users.js

S02: Execute command
|-- $ npx sequelize db:migrate --env development  # implements the changes in the
|-- + -> table(model) in database.
|-- + -> Note that these table were defined in the up section of the newly created 
|-- + -> migration file. Therefore, this command executes code in the up section.
|-- : The option --env is used to selected the credentials from the json object
|-- + -> listed in the ./config/config.js file.
|-- Check your database to see that the change has been effected in the table. 



# =============================================================================
# V33 | tut14 | RENAME A COLUMN TO TABLE IN DATABASE - SEQUELIZE-CLI
# =============================================================================
This operation is performed just as in tut13.
-----
STEPS
-----
S01: Execute command
|-- $ npx sequelize migration:generate --name <migration_name> # alternative command
|-- $ npx sequelize migration:generate --name rename_col_firstname # usage example
|-- : This will create a new migration file with the given name <migration_name>
    + -> in the migrations folder of your project. Within this file once can
    + -> add the commands to add column in the models (table) in the database.
    + -> "await queryInterface.renameColumn(<table_name, <col_name>, <new_col_name>)
    + -> "await queryInterface.renameColumn('Users', 'firstName', 'userName') # usage
    + -> This must be done in the up section of the file.
    : Note that there are two sections within the newly created migration file.
    + -> (up and down).
    + -> To revert the action of the up section the down section is used.
    + -> "await queryInterface.renameColumn(<table_name, <new_col_name>, <col_name>)
    + -> "await queryInterface.renameColumn('Users', 'userName', 'firstName') # usage
    + -> See file in directory ./migrations/*rename_col_firstname.js

S02: Execute command
|-- $ npx sequelize db:migrate --env development  # implements the changes in the
|-- + -> table(model) in database.
|-- + -> Note that these table were defined in the up section of the newly created 
|-- + -> migration file. Therefore, this command executes code in the up section.
|-- : The option --env is used to selected the credentials from the json object
|-- + -> listed in the ./config/config.js file.
|-- Check your database to see that the change has been effected in the table. 





# =============================================================================
# V25 | tut15 | USER AUTHENTICATION WITH POSTGRESQL and NODE JS
# =============================================================================
S01: Install new packages for authentication purposes with command below
|--  $ npm install bcrypt jsonwebtoken 

S0X: Make migration to insert table in the database.
S0X: Note that pg query to insert data in the table requires that the fields are
|..  + are case sensitive. Such fields must be wrapped around double quotes.
|..  + Example: 
       `INSERT INTO public."Users" ("userName", email, password, "createdAt", "updatedAt") VALUES ($1, $2, $3, $4, $5) RETURNING *`,

S0X: REGISTER USER: Make post request to register user into the database and hash user password
|--  $ curl -X POST http://localhost:8080/register  \
       -H "Content-Type: application/json"  \
       -d '{"userName":"jd40","password":"hjz97%$4d", "email": "jd40@karate.de"}'
|--  : Check that the user was successfully added into the database.

S0X: LOGIN USER: Make post request to login user 
|--  $ curl -X POST http://localhost:8080/register  \
       -H "Content-Type: application/json"  \
       -d '{"password":"hjz97%$4d", "email": "jd40@karate.de"}'
|--  : Now that the user is registered attempt to login by sending via CURL.
|--  + withn the above command.
|--  : Check that the server response with a string of token seperated by dots.
|--  : attempt to login with wrong credentials to see how the server responds.


S0X: FETCH USER INFO: Make get request to retreive user info 
This is achieved by adding the token received from the server to the request header
as shown below.
Note that the token is usually longer than shown below. (below example is for demo)
|--  $ curl http://localhost:8080/userinfo \
       -H "Content-Type: application/json" \
       -H "Authorization: Bearer eyJhbGciOiJIUz.I1NiIsInR.5cCI6IkpXVCJ9"
|--  : Check that the server response with a user info from server database
|--  : attempt to login with wrong credentials to see how the server responds.



# =============================================================================
# V23 | tut16 | IMAGE UPLOAD ON NODEJS USING SEQUELIZE
# =============================================================================
In order to manage file uploads a package called multer is required.

-----
steps
-----
S00 : Create a new database model for File (./models/file.js) just like todo.js
S01 : Install package -> npm install multer
S02 : include the package in app.js file .
S03 : Ensure that the database is synced using sequelize (app.js)
s04 : (app.js) Multer -> create a storage instance. Which defines where the store 
|.. + - uploaded files and the original file name. 

s04 : (app.js) Multer -> create an upload instance with the created storage instance 
|.. + - This is used as the middleware during post request handling.
|.. + - This instance contains access to methods that can be called as
|.. + - middlewares in the post request definition. 

s05 : (app.js) Define routes (POST & GET) to upload a file and to fetch the 
|.. + - file information

:todo create db model for file and test the application for file upload.



