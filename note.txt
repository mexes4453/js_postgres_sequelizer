https://www.youtube.com/watch?v=dPM3POQjyqo&list=PLsvvBhdpMqBzyrmkAAO5zsOwO0wCTU7bj&index=1



npm init -y           : start a new node js project
npm install dotenv    : install dotenv package to read .env files
npm install pg        : install postgres client package 
npm install sequelize : install orm package for database
npm install sequelize-cli : install to provide command line interface for sequelize
npx sequelize-cli init   : Generate boilerplate structure for Sequelize.
                         + This means it will create the folder structures
                         + in your projects as follows;
                         + config/
                         + models/
                         + migrations/
                         + seeders/

npm install express     : used to create server to serve clients
npm install body-parser : A middleware (especially with express) that parses the body
                        + of incoming HTTP requests and makes it available under 
                        + req.body. Thus, avoids dealing with raw stream of bytes in
                        + the body of a request (POST, PUT, PATCH) to handle the
                        + chunks and decode JSON and form data.

# =====
# MODEL
# =====
Models are database table definition.
Every model has a controller, route for CRUD operation.


# ===========
# CONTROLLERS
# ===========
This contains mainly functions required to create, get, update and delete
instances of a model (table entries (row)) as required by an application


# ======
# ROUTES
# ======
This are path through which a client request is services. The routes links the client request
to the approriate controller to perform action for the client.


# =============================================
# BROWSER CLIENT ALTERNATIVE ALTERNATIVE (CURL)
# =============================================

# Fetch all users
curl http://localhost:3000/api/users 

# Fetch user by id
curl http://localhost:3000/api/users/1  

# Post data to server to be stored in database (adding an entry the user model (table) in database).
curl -X POST http://localhost:3000/api/users/1  -H "Content-Type: application/json"  -d '{"firstName":"Heian","lastName":"sanda", "email": "heian.sanda@karate.de"}'

# Put data to server to be update in database (update an existing entry in the user model (table) in database).
curl -X PUT http://localhost:3000/api/users/1  -H "Content-Type: application/json"  -d '{"firstName":"Heian","lastName":"sanda", "email": "heian.sanda@karate.de"}'

# Post data server to be deleted in database (delete an existing entry in the user model (table) in database).
curl -X PUT http://localhost:3000/api/users/1  -H "Content-Type: application/json"  -d '{"firstName":"Heian","lastName":"sanda", "email": "heian.sanda@karate.de"}'


# v6
# ==============================================
# DATABASE TABLE (MODEL) QUERIES WITH SEQUELIZE
# ==============================================
const User = require(./models/User)

// Find all Records
User.findAll()
.then( (users) => {
    console.log(users)
    })
.catch( err => { console.error(' error ', err)})




// Find Record with Conditions (filters)
User.findAll({
    where: {
        email: a@b.com,
    }
})
.then( (users) => {
    console.log(users)
    })
.catch( err => { console.error(' error ', err)})



// Find Record with Conditions ( find only one record with given id)
User.findOne({
    where: {
        id: 2,
    }
})
.then( (users) => {
    console.log(users)
    })
.catch( err => { console.error(' error ', err)})



// Create a new record (row)
User.create({
    firstName: 'f',
    lastName: 'l',
    email: 'fl@b.com'
})
.then( (users) => {
    console.log('user created ', users)
    })
.catch( err => { console.error(' error ', err)})




// update Record with Conditions (filters)
User.update({
    firstName: 'fn'
},
{
    where: { id: 1 }
})
.then( (users) => {
    console.log("update successful)
    })
.catch( err => { console.error(' error ', err)})



// Delete Record with Conditions ( find only one record with given id)
User.destroy({
    where: {
        id: 2,
    }
})
.then( (users) => {
    console.log(users)
    })
.catch( err => { console.error(' error ', err)})



// Using raw sql queries
const sql = 'SELECT * FROM users WHERE  age > :age';
sequelize.query(sql, {
    replacements: {age: 18},
    type: Sequelize.QueryTypes.SELECT 
})
.then ( (result) => { console.log(results); })
.catch ( (err) => console.error( 'Error: ', err));


// v7 : findOne
// -----------
// record that matches a set of criteria
const user = await User.findOne( { where: { firstName: 'john'}})

// v7 : findAll 
// -----------
// Retrieve multiple records that matches a set of criteria
const user = await User.findAll ( { where: { age: { [Sequelize.Op.gt]: 18 }}})

// v7 : findAndCountAll
// -------------------
// similar to findAll, it returns the result together with its length. it is useful for pagination.
const {row, count } = await User.findAndCountAll ( { where: { age: { [Sequelize.Op.gt]: 18 }}})


// v7 : findByPk
// ------------
// Find a record by its primary key
const user = await User.findByPk(1); 


// v7: findOrCreate
// ---------------
// attempts to find a record based on a given criteria and creates it if it does not exist.
const [user, created] = User.findOrCreate({
    where: { firstName: 'John' },
    defaults: { age:30 }
})

// v7: findOne - with association to other models
// ----------------------------------------------
// retrieve associated records of a model with association type (hasMany)
const user = await User.findOne({
    where: { username: 'John'},
    include: [Post] // associate model to queried model.
})

# VIRTUALS
these are computed properties that are not stored in the database but
are based on the values of other attributes. 


# =============================================================================
# ASSOCIATIONS BETWEEN MODELS (TABLES)                                        |
# =============================================================================
# V13: One-To-One
# ---------------
This type of model association specifies the foreign key relationship between 
two models. For example, Each user has one associated profile and each profile
belongs to one user. (See ./models/index.js)
User.hasOne(Profile)
Profile.belongsTo(User) // Adds the user primary key to the Profile (model) table.

# ----------------
# V14: One-To-Many
# ----------------
This association type specifies the relationship between a model which has 
multiple instance of it being associated with only a single instance of 
another model.
Example: Each User can have multiple Todo. Therefore, this is achieved by an
addition of the user primary key in a new column within the todo model (table)
User.hasMany(Todo)
Todo.belongsTo(User)


# -----------------
# V15: Many-To-Many
# -----------------
This association type establish relationship between a two models where 
instances of each of them can be found in its counter part model.
Example: Students and Courses. 
A student can enroll for multiple courses
A course can have multiple students enrolled in it.

syntax:
Student.belongsToMany(Course, { through: "StudentCourse })
Course.belongsToMany(Student, { through: "StudentCourse })
this association would map the two models using a new table (model) called 
"StudentCourse"

steps:
s0: create new models (./models/course.js and ./models/student.js)
s1: import them in ./models/index.js and define their relationship
s2: test the association in app.js (with anonymous test function)



